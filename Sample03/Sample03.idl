// Sample03.idl : Sample03 の IDL ソース
//

// このファイルは、タイプ ライブラリ (Sample03.tlb) およびマーシャリング コードを
// 作成するために MIDL ツールによって処理されます。

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(26251BAE-B229-48DC-9B3E-7C9F77BF7D17),
	dual,
	nonextensible,
	helpstring("IMyEnumerable インターフェイス"),
	pointer_default(unique)
]
interface IMyEnumerable : IDispatch{
    [propget, id(DISPID_NEWENUM), helpstring("プロパティ _NewEnum"), restricted] HRESULT _NewEnum([out, retval] IUnknown** ppVal);
};
[
	object,
	uuid(ACA95E6E-8AD2-4F69-BC53-A7F8DC8F20E8),
	dual,
	nonextensible,
	helpstring("IMyEnumerableGenerator インターフェイス"),
	pointer_default(unique)
]
interface IMyEnumerableGenerator : IDispatch{
    [id(1), helpstring("メソッド CreateInstance")] HRESULT CreateInstance([out,retval] IMyEnumerable** ppVal);
};
[
	object,
	uuid(5EC980D6-C48E-4840-B31D-3BB5121326F7),
	dual,
	nonextensible,
	helpstring("IStrVectorCollection インターフェイス"),
	pointer_default(unique)
]
interface IStrVectorCollection : IDispatch{
    [id(1), helpstring("メソッド Add")] HRESULT Add([in] BSTR item);
    [propget, id(DISPID_NEWENUM), helpstring("プロパティ _NewEnum"), restricted] HRESULT _NewEnum([out, retval] IUnknown** ppVal);
    [id(2), helpstring("メソッド Clear")] HRESULT Clear(void);
    [id(3), helpstring("メソッド Contains")] HRESULT Contains([in] BSTR item, [out,retval] VARIANT_BOOL* exists);
    [id(4), helpstring("メソッド CopyTo")] HRESULT CopyTo([in, out] SAFEARRAY(BSTR) pArray, [in] LONG index);
    [id(5), helpstring("メソッド Remove")] HRESULT Remove([in] BSTR item);
    [propget, id(6), helpstring("プロパティ Count")] HRESULT Count([out, retval] LONG* pVal);
    [propget, id(7), helpstring("プロパティ IsReadOnly")] HRESULT IsReadOnly([out, retval] VARIANT_BOOL* pVal);
    [propget, id(DISPID_VALUE), helpstring("プロパティ Item")] HRESULT Item([in] LONG index, [out, retval] BSTR* pVal);
    [propput, id(DISPID_VALUE), helpstring("プロパティ Item")] HRESULT Item([in] LONG index, [in] BSTR newVal);
};
[
	object,
	uuid(F995DE07-5AEC-49B5-A021-66327255A80D),
	dual,
	nonextensible,
	helpstring("IIntDequeCollection インターフェイス"),
	pointer_default(unique)
]
interface IIntDequeCollection : IDispatch{
    [id(1), helpstring("メソッド Add")] HRESULT Add([in] INT item);
    [propget, id(DISPID_NEWENUM), helpstring("プロパティ _NewEnum"), restricted] HRESULT _NewEnum([out, retval] IUnknown** ppVal);
    [id(2), helpstring("メソッド Clear")] HRESULT Clear(void);
    [id(3), helpstring("メソッド Contains")] HRESULT Contains([in] INT item, [out,retval] VARIANT_BOOL* exists);
    [id(4), helpstring("メソッド CopyTo")] HRESULT CopyTo([in, out] SAFEARRAY(INT) pArray, [in] LONG index);
    [id(5), helpstring("メソッド Remove")] HRESULT Remove([in] INT item);
    [propget, id(6), helpstring("プロパティ Count")] HRESULT Count([out, retval] LONG* pVal);
    [propget, id(7), helpstring("プロパティ IsReadOnly")] HRESULT IsReadOnly([out, retval] VARIANT_BOOL* pVal);
    [propget, id(DISPID_VALUE), helpstring("プロパティ Item")] HRESULT Item([in] LONG index, [out, retval] INT* pVal);
    [propput, id(DISPID_VALUE), helpstring("プロパティ Item")] HRESULT Item([in] LONG index, [in] INT newVal);
};
[
	object,
	uuid(996683EC-CF57-47B5-84E6-A96333757668),
	dual,
	nonextensible,
	helpstring("IUnkVectorCollection インターフェイス"),
	pointer_default(unique)
]
interface IUnkVectorCollection : IDispatch{
    [id(1), helpstring("メソッド Add")] HRESULT Add([in] IUnknown* item);
    [propget, id(DISPID_NEWENUM), helpstring("プロパティ _NewEnum"), restricted] HRESULT _NewEnum([out, retval] IUnknown** ppVal);
    [id(2), helpstring("メソッド Clear")] HRESULT Clear(void);
    [id(3), helpstring("メソッド Contains")] HRESULT Contains([in] IUnknown* item, [out,retval] VARIANT_BOOL* exists);
    [id(4), helpstring("メソッド CopyTo")] HRESULT CopyTo([in, out] SAFEARRAY(IUnknown*) pArray, [in] LONG index);
    [id(5), helpstring("メソッド Remove")] HRESULT Remove([in] IUnknown* item);
    [propget, id(6), helpstring("プロパティ Count")] HRESULT Count([out, retval] LONG* pVal);
    [propget, id(7), helpstring("プロパティ IsReadOnly")] HRESULT IsReadOnly([out, retval] VARIANT_BOOL* pVal);
    [propget, id(DISPID_VALUE), helpstring("プロパティ Item")] HRESULT Item([in] LONG index, [out, retval] IUnknown** pVal);
    [propput, id(DISPID_VALUE), helpstring("プロパティ Item")] HRESULT Item([in] LONG index, [in] IUnknown* newVal);
};
[
	object,
	uuid(8AE32A92-4B5C-4A78-8867-4CAF1E8D0905),
	dual,
	nonextensible,
	helpstring("IMyCollectionGenerator インターフェイス"),
	pointer_default(unique)
]
interface IMyCollectionGenerator : IDispatch{
    [id(1), helpstring("メソッド CreateStrVectorCollection")] HRESULT CreateStrVectorCollection([out,retval] IStrVectorCollection** ppVal);
    [id(2), helpstring("メソッド CreateIntDequeCollection")] HRESULT CreateIntDequeCollection([out,retval] IIntDequeCollection** ppVal);
    [id(3), helpstring("メソッド CreateUnkVectorCollection")] HRESULT CreateUnkVectorCollection([out,retval] IUnkVectorCollection** ppVal);
};
[
	uuid(4F3639A6-BF3E-4D50-BEF2-A1AFF6C094DF),
	version(1.0),
	helpstring("Sample03 1.0 タイプ ライブラリ")
]
library Sample03Lib
{
	importlib("stdole2.tlb");
	[
		uuid(732D6B0C-651E-4D5D-A706-447DDB84C6D5),
		helpstring("MyEnumerable Class")
	]
	coclass MyEnumerable
	{
		[default] interface IMyEnumerable;
	};
	[
		uuid(F9DAF8FA-8D6F-42C7-85CF-901911821456),
		helpstring("MyEnumerableGenerator Class")
	]
	coclass MyEnumerableGenerator
	{
		[default] interface IMyEnumerableGenerator;
	};
	[
		uuid(5613C9D4-136F-408D-A419-15B524CF54E8),
		helpstring("MyCollectionGenerator Class")
	]
	coclass MyCollectionGenerator
	{
		[default] interface IMyCollectionGenerator;
	};
	[
		uuid(7B1523A2-0795-4678-9E43-B51E51A375BB),
		helpstring("StrVectorCollection Class")
	]
	coclass StrVectorCollection
	{
		[default] interface IStrVectorCollection;
	};
	[
		uuid(A1E12DEC-117D-4E6B-AB0D-DFF71B404945),
		helpstring("IntDequeCollection Class")
	]
	coclass IntDequeCollection
	{
		[default] interface IIntDequeCollection;
	};
	[
		uuid(B69821E4-3032-4169-B6A6-4F3C01464B2B),
		helpstring("UnkVectorCollection Class")
	]
	coclass UnkVectorCollection
	{
		[default] interface IUnkVectorCollection;
	};
};
