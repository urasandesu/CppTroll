#pragma once
#ifndef INCLUDED_VARIANTHASHCODE_H
#define INCLUDED_VARIANTHASHCODE_H

#ifndef INCLUDED_VARIANTTRAITS_H
#include "VariantTraits.h"
#endif

namespace My
{
    template<class VarType>
    struct VariantHashCode : 
        private VariantTraits<VarType>
    {
        inline static LONG Get(const VARIANT& var);
    };

#define DECLARE_VARIANT_HASH_CODE(var_type_) \
    template<> \
    struct VariantHashCode<var_type_> :  \
        private VariantTraits<var_type_> \
    { \
        inline static LONG Get(const VARIANT& var) \
        { \
            return VariantGetHashCode<const_param_type>(Val(var), var_type()); \
        } \
    }; 

    DECLARE_VARIANT_HASH_CODE(I_VT_UINT);
    DECLARE_VARIANT_HASH_CODE(I_VT_UI4);
    DECLARE_VARIANT_HASH_CODE(I_VT_UI2);
    DECLARE_VARIANT_HASH_CODE(I_VT_UI1);
    DECLARE_VARIANT_HASH_CODE(I_VT_INT);
    DECLARE_VARIANT_HASH_CODE(I_VT_I4);
    DECLARE_VARIANT_HASH_CODE(I_VT_I2);
    DECLARE_VARIANT_HASH_CODE(I_VT_I1);
    DECLARE_VARIANT_HASH_CODE(I_VT_ERROR);
    DECLARE_VARIANT_HASH_CODE(I_VT_BOOL);
    DECLARE_VARIANT_HASH_CODE(I_VT_UI8);
    DECLARE_VARIANT_HASH_CODE(I_VT_I8);
    DECLARE_VARIANT_HASH_CODE(I_VT_R8);
    DECLARE_VARIANT_HASH_CODE(I_VT_DATE);
    DECLARE_VARIANT_HASH_CODE(I_VT_BSTR);
    DECLARE_VARIANT_HASH_CODE(I_VT_R4);
    DECLARE_VARIANT_HASH_CODE(I_VT_DECIMAL);
    DECLARE_VARIANT_HASH_CODE(I_VT_CY);
    DECLARE_VARIANT_HASH_CODE(I_VT_VARIANT_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_UNKNOWN_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_UINT_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_UI8_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_UI4_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_UI2_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_UI1_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_R8_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_R4_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_INT_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_I8_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_I4_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_I2_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_I1_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_ERROR_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_DISPATCH_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_DECIMAL_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_DATE_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_CY_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_BSTR_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_BOOL_REF);
    DECLARE_VARIANT_HASH_CODE(I_VT_UNKNOWN);
    DECLARE_VARIANT_HASH_CODE(I_VT_DISPATCH);
    
#undef DECLARE_VARIANT_HASH_CODE

}   // namespace My

#endif  // #ifndef INCLUDED_VARIANTHASHCODE_H